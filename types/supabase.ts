/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/friendships": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.friendships.id"];
          instigator_id?: parameters["rowFilter.friendships.instigator_id"];
          reciever_id?: parameters["rowFilter.friendships.reciever_id"];
          confirmed?: parameters["rowFilter.friendships.confirmed"];
          created_at?: parameters["rowFilter.friendships.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["friendships"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** friendships */
          friendships?: definitions["friendships"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.friendships.id"];
          instigator_id?: parameters["rowFilter.friendships.instigator_id"];
          reciever_id?: parameters["rowFilter.friendships.reciever_id"];
          confirmed?: parameters["rowFilter.friendships.confirmed"];
          created_at?: parameters["rowFilter.friendships.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.friendships.id"];
          instigator_id?: parameters["rowFilter.friendships.instigator_id"];
          reciever_id?: parameters["rowFilter.friendships.reciever_id"];
          confirmed?: parameters["rowFilter.friendships.confirmed"];
          created_at?: parameters["rowFilter.friendships.created_at"];
        };
        body: {
          /** friendships */
          friendships?: definitions["friendships"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/users": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          profile_url?: parameters["rowFilter.users.profile_url"];
          username?: parameters["rowFilter.users.username"];
          displayName?: parameters["rowFilter.users.displayName"];
          bio?: parameters["rowFilter.users.bio"];
          created_at?: parameters["rowFilter.users.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** users */
          users?: definitions["users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          profile_url?: parameters["rowFilter.users.profile_url"];
          username?: parameters["rowFilter.users.username"];
          displayName?: parameters["rowFilter.users.displayName"];
          bio?: parameters["rowFilter.users.bio"];
          created_at?: parameters["rowFilter.users.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          profile_url?: parameters["rowFilter.users.profile_url"];
          username?: parameters["rowFilter.users.username"];
          displayName?: parameters["rowFilter.users.displayName"];
          bio?: parameters["rowFilter.users.bio"];
          created_at?: parameters["rowFilter.users.created_at"];
        };
        body: {
          /** users */
          users?: definitions["users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/wordle": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.wordle.id"];
          guesses?: parameters["rowFilter.wordle.guesses"];
          owner_id?: parameters["rowFilter.wordle.owner_id"];
          created_at?: parameters["rowFilter.wordle.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["wordle"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** wordle */
          wordle?: definitions["wordle"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.wordle.id"];
          guesses?: parameters["rowFilter.wordle.guesses"];
          owner_id?: parameters["rowFilter.wordle.owner_id"];
          created_at?: parameters["rowFilter.wordle.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.wordle.id"];
          guesses?: parameters["rowFilter.wordle.guesses"];
          owner_id?: parameters["rowFilter.wordle.owner_id"];
          created_at?: parameters["rowFilter.wordle.created_at"];
        };
        body: {
          /** wordle */
          wordle?: definitions["wordle"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  friendships: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    instigator_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    reciever_id: string;
    /** Format: boolean */
    confirmed: boolean;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
  };
  users: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: text */
    profile_url?: string;
    /** Format: text */
    username: string;
    /** Format: text */
    displayName: string;
    /** Format: text */
    bio?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
  };
  wordle: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: ARRAY */
    guesses: unknown[];
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    owner_id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description friendships */
  "body.friendships": definitions["friendships"];
  /** Format: uuid */
  "rowFilter.friendships.id": string;
  /** Format: uuid */
  "rowFilter.friendships.instigator_id": string;
  /** Format: uuid */
  "rowFilter.friendships.reciever_id": string;
  /** Format: boolean */
  "rowFilter.friendships.confirmed": string;
  /** Format: timestamp with time zone */
  "rowFilter.friendships.created_at": string;
  /** @description users */
  "body.users": definitions["users"];
  /** Format: uuid */
  "rowFilter.users.id": string;
  /** Format: text */
  "rowFilter.users.profile_url": string;
  /** Format: text */
  "rowFilter.users.username": string;
  /** Format: text */
  "rowFilter.users.displayName": string;
  /** Format: text */
  "rowFilter.users.bio": string;
  /** Format: timestamp with time zone */
  "rowFilter.users.created_at": string;
  /** @description wordle */
  "body.wordle": definitions["wordle"];
  /** Format: uuid */
  "rowFilter.wordle.id": string;
  /** Format: ARRAY */
  "rowFilter.wordle.guesses": string;
  /** Format: uuid */
  "rowFilter.wordle.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.wordle.created_at": string;
}

export interface operations {}

export interface external {}
